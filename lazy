#!/usr/bin/env python3
from subprocess import Popen, PIPE, TimeoutExpired
import multiprocessing
import time
import os, sys
import threading
import argparse
import signal
import functools

verbose = False

def getidle():
    proc = Popen(['xprintidle'], stdout=PIPE)
    try:
        proc.wait(timeout=0.1) # seconds
    except TimeoutExpired:
        if verbose:
            print(f'xprintidle: [TimeoutExpired]', file=sys.stderr)
        return 0
    val = int(proc.stdout.read())
    if verbose:
        print(f'xprintidle: {val}', file=sys.stderr)
    return val

def control_loop(pid):
    os.kill(pid, signal.SIGCONT)
    state = 'RUNNING'
    while True:
        t = getidle()
        if state == 'RUNNING' and t < 500:
            if verbose:
                print(f'kill -SIGSTOP {pid}', file=sys.stderr)
            os.kill(pid, signal.SIGSTOP)
            state = 'STOPPED'
        elif state == 'STOPPED' and t > 1000:
            if verbose:
                print(f'kill -SIGCONT {pid}', file=sys.stderr)
            os.kill(pid, signal.SIGCONT)
            state = 'RUNNING'
        time.sleep(0.050)

def start():
    """Import this module from your application and call start() to begin
    the watchdog from within python.

    Note that like in PID mode, the first SIGSTOP will background the
    command in bash (as if you pressed ^Z), which might be an
    inconvenience.

    """
    pid = os.getpid()
    proc = multiprocessing.Process(target=control_loop, args=[pid])
    proc.start()

def main():
    parser = argparse.ArgumentParser(description='Run a command only when idle.')
    parser.add_argument('command', type=str, nargs='*', help='command to execute')
    parser.add_argument('-p', '--pid', type=int, default=None, help='process id instead of command')
    parser.add_argument('-v', '--verbose', default=False, action='store_true')
    args = parser.parse_args()
    globals()['verbose'] = args.verbose
    if args.pid is not None:
        control_loop(args.pid)
    else:
        proc = Popen(args.command)
        threading.Thread(target=functools.partial(control_loop, proc.pid), daemon=True).start()
        proc.wait()

if __name__ == '__main__':
    main()